#include <iostream>
#include <string>
#include <cstring>
#include <cstddef>
#include <cmath>


/// example hash-table (OPEN_ADDRESSING)
#define HASH_TABLE_SIZE 20

using namespace std;



class Person // test class
{
public:
    Person *next;
    string name;
    string surname;
    int age;

    Person()
    {
        this->name = "null";
        this->surname = "null";
        this->age = 0;
        this->next = NULL;
    }

    Person (string name, string surname, int age = 0)
    {
        this->name = name;
        this->surname = surname;
        this->age = age;
        this->next = NULL;
    }

    ~Person()
    {
        if ( this->next != NULL )
        {
            delete this->next;
        }
    }
};

template<typename T>
class HashTable
{
    struct Node
    {
        T value;
        string key = "free";
    };
    Node *table[HASH_TABLE_SIZE];
public:
    /*int hashM ( string str )
    {
        const int p = 31;
        long long hash_number = 0;
        long long p_pow = 1;
        for(size_t i = 0; i < str.length(); i++)
        {
            hash_number += (str[i] - 'a'+1) * p_pow;
            p_pow *= p;
        }
        return hash_number % HASH_TABLE_SIZE;
    }*/
    /*int hashLine(string str, int proba)
    {
        long long hash_number = (hash(str)+proba);
        return hash_number % HASH_TABLE_SIZE;
    }
    int hashQuadratic(string str, int proba)
    {
        long long hash_number = (hash(str)+ 4*proba + 2*pow(proba,2));
        return hash_number % HASH_TABLE_SIZE;
    }*/


    int hashTableSize = 0;
    HashTable()
    {
        for ( int i = 0; i < HASH_TABLE_SIZE; i++ )
        {
            table[i] = new Node();
        }
    }
    ~HashTable()
    {
        for ( int i = 0; i < HASH_TABLE_SIZE; i++ )
        {
            delete table[i];
        }
    }
    void print()
    {
        for(int i = 0; i < HASH_TABLE_SIZE; i++)
        {
            cout<<table[i]->key<<endl;
        }
    }

    /// add element (metoda kwadratowa)
    void insert (T *data, int(*hashMetod)(string k, int p))
    {
        int hashNumber = hashMetod(data->name, 1);
        if (table[hashNumber]->key == "free")
        {
            table[hashNumber]->value = *data;
            table[hashNumber]->key = "busy";
            return;
        }

        int proba = 2;
        while(hashNumber < HASH_TABLE_SIZE && table[hashNumber]->key == "busy")
        {
            hashNumber = hashMetod(data->name, proba);
            proba++;
        }
        table[hashNumber]->value = *data;
        table[hashNumber]->key = "busy";
    }
    /// Find element by name (metoda liniowa)
    T find ( string name, int(*hashMetod)(string key, int proba))
    {
        int hashNumber = hashMetod ( name ,1);
        Person result = table[hashNumber]->value;
        if(table[hashNumber]->value.name == name)
        {
            return result;
        }

        int proba = 2;
        while(hashNumber < HASH_TABLE_SIZE && table[hashNumber]->key == "busy")
        {
            hashNumber = hashMetod(name, proba);
            proba++;
        }
        result = table[hashNumber]->value;

        try
        {
            if (result.name != name)
            {
                throw 1;
            }
            return result;
        }
        catch(int i)
        {
            cout << "Error - " << i << " not found person!!!!" << endl;
            return Person("NULL","NULL",0);
        }
    }

    /**********************************************************************************/
    /// add element (metoda liniowa)
    /*void insertLinearProbing (T *data)
    {
        int hashNumber = hashLine(data->name, 1);
        if (table[hashNumber]->key == "free")
        {
            table[hashNumber]->value = *data;
            table[hashNumber]->key = "busy";
            hashTableSize++;
            return;
        }

        int proba = 2;
        while(hashNumber < HASH_TABLE_SIZE && table[hashNumber]->key == "busy")
        {
            hashNumber = hashLine(data->name, proba);
            proba++;
        }
        table[hashNumber]->value = *data;
        table[hashNumber]->key = "busy";
    }
    /// Find element by name (metoda liniowa)
    T findLinearProbing ( string name )
    {
        int hashNumber = hashLine(name, 1);
        Person result = table[hashNumber]->value;
        if(table[hashNumber]->value.name == name)
        {
            return result;
        }

        int proba = 2;
        while(hashNumber < HASH_TABLE_SIZE && table[hashNumber]->key != "busy")
        {
            hashNumber = hashLine(name, proba);
            proba++;
        }
        result = table[hashNumber]->value;

        try
        {
            if (result.name != name)
            {
                throw 1;
            }
            return result;
        }
        catch(int i)
        {
            cout << "Error - " << i << " not found person!!!!" << endl;
            return Person("NULL","NULL",0);
        }
    }*/
};

int hashModul ( string str )
    {
        const int p = 31;
        long long hash_number = 0;
        long long p_pow = 1;
        for(size_t i = 0; i < str.length(); i++)
        {
            hash_number += (str[i] - 'a'+1) * p_pow;
            p_pow *= p;
        }
        return hash_number % HASH_TABLE_SIZE;
    }

int hashLine(string str, int proba)
    {
        long long hash_number = hashModul(str)+proba;
        return hash_number % HASH_TABLE_SIZE;
    }
int hashQuadratic(string str, int proba)
    {
        long long hash_number = (hashModul(str)+ 4*proba + 2*pow(proba,2));
        return hash_number % HASH_TABLE_SIZE;
    }


int main()
{
    HashTable<Person> newTable;

    Person *p1 = new Person("Artyom", "Devyatov", 20);
    Person *p2 = new Person("Vasya", "Petrov", 23);
    Person *p3 = new Person("Ilja", "Saveljev", 28);
    Person *p4 = new Person("Ilaj", "Savanna", 43);
    Person *p5 = new Person("Dmitry", "Kuzychev", 31);

    newTable.insert(p1, hashQuadratic);
    newTable.insert(p2, hashQuadratic);
    newTable.insert(p3, hashQuadratic);
    newTable.insert(p4, hashQuadratic); // have collisions  with Ilja
    newTable.insert(p5, hashQuadratic);


    Person search = newTable.find("Vasya", hashQuadratic);

    cout<<search.surname<<"\t"<<search.name<<"\t"<<search.age;

    //newTable.print();

    return 0;
}














